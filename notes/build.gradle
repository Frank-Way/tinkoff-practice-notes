plugins {
	id "org.flywaydb.flyway" version "7.11.1"
	id 'org.springframework.boot' version '2.2.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.26.0'
	id 'com.palantir.docker-run' version '0.26.0'
	id "com.palantir.docker-compose" version "0.26.0"
	//id 'com.avast.gradle.docker-compose' version '0.7.1'
}

group = 'com.practice'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'junit:junit:4.12'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation "io.springfox:springfox-boot-starter:3.0.0"
	testImplementation 'org.springframework.cloud:spring-cloud-starter-test'
	testImplementation 'com.playtika.testcontainers:embedded-postgresql-test'
}

test {
	useJUnitPlatform()
}

flyway {
	url = 'jdbc:postgresql://localhost:5432/postgres'
	user = 'root'
	password = '6342'
	schemas = ['public']
}

String imageName = "notes:$version"
docker {
	name imageName
	files "build/libs/${bootJar.archiveFileName.get()}"
	buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}
dockerRun {
	name project.name
	image imageName
	ports '8080:8080'
	clean true
}
dockerCompose {
	dockerComposeFile 'docker-compose.yml'
}